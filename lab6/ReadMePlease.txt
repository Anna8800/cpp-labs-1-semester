ВСТАВКАМИ/2

//вместо enum использовать лучше массив

Программа должна состоять из следующих модулей (разбита на файлы):
Можно сделать несколько файлов -> надо проверять на то существует ли файл

1) support -> модуль ввода/вывода
Для файлового ввода/вывода используйте функции fprintf и fscanf.
Функции ввода/вывода НЕ должны применяться за пределами модуля ввода-вывода. По возможности стараться избегать дублирования кода,
например, код считывающий структуру с клавиатуры и из файла будет практически одинаковым,
подумайте, как организовать функции так, чтобы дублирование было минимально.
первичная поддержка пользователя, readme, переход на дальнейшие функции
++ Или вообще ВЕСЬ вывод (в том числе например ф-я "распечатать содержимое картотеки")
функци объявляется где объявляется, а вот выводится 
++ и ВЕСЬ ввод (или ввод пользователя для выбора поля сортировки)
как фронт и бэк
все взаимодействие с пользователем здесь


2) sort -> модуль сортировки (вставками)
То же самое касается и функций сортировки - алгоритм один, меняется только функция сравнения.
Предоставьте пользователю возможность выводить перечень книг в определенном порядке. 
 признак - "по какому полю сортируем" можно ввести с помощью перечисления.
Написать функцию (функции) сортировки массива структур по любому из полей структуры. 
- сортировка по автору
- сортировка по названию
- сортировка по году
- сортировка по цене
- сортировка по категории


3) book -> модуль структуры книги 
В качестве основы структуру BOOK можно взять из задания №5. Функции:
+ печать книги
+ ввод новой книги
? с сортировкой по полям?


4) book_collection -> модуль картотеки  
Требуется реализовать следующие функции:
+- Cчитать из файла содержимое в картотеку (loadLibrary) - не автоматически, по запросу. 
	изначально картотека пуста. как ворд!
+ Распечатать содержимое картотеки (нужно обращение к book) (printLibrary)
+ Ввести новую книгу (нужно обращение к book) (addBook) - из картотеки
+ Удалить существующую книгу или диапазон книг (1-3) непрерывный(deleteBook) - из картотеки
  Перед выполнением необратимой операции (например, удаление книги) поинтересуйтесь у пользователя, 
  точно ли он провести именно эту операцию и хочет ли вообще. 
+ Записать текущее содержимое картотеки в файл (scanLibrary)
+ По всей картотеке вычислить, сколько книг относится к категории введенной пользователем (ИЗ) (countBookCategory)
-? Вывести перечень книг в определенном порядке (нужно обращение к sort)
+ связь с support 

Пошаговая инструкция:
+ loadLibrary: открывает файл для чтения, очищает текущую картотеку и добавляет каждую книгу из файла в картотеку
+ printLibrary: если картотека не пуста, печатает каждую книгу с помощью функции printBook
+ addBook: Если емкость массива books исчерпана, функция увеличивает емкость массива, 
	создавая новый массив большего размера и копируя существующие элементы.
+ deleteBook: сдвигает все книги после удаляемой книги, чтобы заполнить пустое место.
+ scanLibrary: открывает файл для записи и записывает информацию о каждой книге в отдельных строках.
+ countBookCategory: перебирает все книги и увеличивает счетчик, если категория совпадает с указанной.


Модуль картотеки должен включать в себя структуру Library, которая будет содержать внутри себя массив из указателей динамической размерности,
т.е. при добавлении книги размерность массива должна увеличиться. 
Чтобы добавление и удаление элементов происходило эффективно необходимо ввести две переменные в структуру картотека, 
одна будет хранить количество уже созданных элементов, 
а вторая количество свободной памяти доступной для заполнения. В случае когда количество созданных элементов превысит, 
количество свободных требуется пересоздать массив большего размера с добавлением нового блока памяти(+delta).

Выход из программы.

Везде где используется динамическая память, требуется выполнить корректные операции очистки памяти delete.
